---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import ArticleCard from '../components/ArticleCard.astro';

let allBlogPosts = await getCollection('blog', ({data}) => data.draft !== true);
let allProjectPosts = await getCollection('projects', ({data}) => data.draft !== true);

let allPosts = [...allBlogPosts, ...allProjectPosts]
  .sort((a, b) => b.data.date - a.data.date)
  .slice(0, 6);

const isOddPosts = allPosts.length % 0 !== 0;

---

<Layout title="Jeff Caldwell" description="Jeff Caldwell is a web developer, writer, journalist, and student who makes fast, accessible websites and writes engaging docs and tutorials.">
	<main id="main">
    <div class="hero">
      <h1>
        <span class="title-display td1">Jeff </span>
        <span class="title-display td2">Caldwell </span>
        <span class="title-display td3">is</span>
        <span class="subtitle-display">a web developer, writer, journalist and student.</span>
      </h1>
      <p class="message display" style="color: var(--secondary)">
        I make fast, accessible websites, and write engaging docs and tutorials.
      </p>
    </div>

    <div class="content">
      <p>
        I live in Texas, where I supervise a team of digital journalists and go to school for computer science. I'm transitioning from a career in journalism into web development and technical writing. See what I'm working on at <a href="/projects">projects</a>, read some of my writing at the <a href="/blog">blog</a> and learn more about me at <a href="/about">about</a>.
      </p>
    </div>

    <div class="button-group">
      <a class="button accent display" href="/projects">Projects</a>
      <a class="button accent display" href="/resume">Resume</a>
    </div>
      
    <!--<a class="hint" href="#latest">
      <p class="display">
        There's More!
      </p>
      <svg viewBox="0 0 48 60" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path fill-rule="evenodd" clip-rule="evenodd" d="M33.588 0H13.6347V36.4848H4.3544e-06L23.5152 60L47.0304 36.4848H33.588V0Z" class="c"/>
      </svg>
    </a>-->

    
    <section id="latest">
    <div class="hint">
      <h2 class="latest-title display">There's More!</h2>
      <svg viewBox="0 0 48 60" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path fill-rule="evenodd" clip-rule="evenodd" d="M33.588 0H13.6347V36.4848H4.3544e-06L23.5152 60L47.0304 36.4848H33.588V0Z" class="c"/>
      </svg>
    </div>
    {allPosts.map((post) => <ArticleCard data={post.data} headingLevel={3}/>)}
    </section>
	</main>
  <div class="isolate">
    <div class="noise"></div>
    <div class="overlay"></div>
  </div>
</Layout>

<style>
  :root {
    --major-size: var(--size-6);
  }

  body {
    position: relative;
  }

  .isolate {
    position: absolute;
    /* height: 100%; */
    /* width: 100%; */
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: -1;
   isolation: isolate; 
  }

  .noise,
  .overlay{
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }

  .noise {
    filter: contrast(130%);
    background:
      linear-gradient(
        0deg,
        var(--secondary),
        var(--secondary-alpha-2),
        var(--secondary-alpha),
        var(--bg-alpha-2),
        var(--bg),
        var(--bg)
        /* var(--bg) */
        /* transparent, */
        /* transparent */
      ),
      url('images/noise.svg');
  }

  .overlay {
    background: var(--secondary);
    mix-blend-mode: multiply;
  }

  main {
    display: flex;
    flex-direction: column;
    gap: var(--size-4);
  }

  .hero {
    color: var(--primary);
  }

  .content {

  }

  .content p {
    line-height: 1.8;
  }

  h1 {
    display: grid;
    grid-template-columns: auto 1fr;
    grid-template-rows: 1fr 1fr 1fr;
    grid-template-areas: 
                  "title1 title1"
                  "title2 title2"
                  "title3 subtitle";
    align-items: top;
    gap: 0 var(--size-1);
    max-width: unset;
    width: 100%;
  }

  h1 * {
    line-height: 1.2;
  }

  .title-display {
    font-size: var(--major-size);
    letter-spacing: 0.125em;
  }

  .td1 {
    grid-area: title1;
    grid-column: span 2;
  }

  .td2 {
    grid-area: title2;
    grid-column: span 2;
  }

  .td3 {
    grid-area: title3;
    line-height: 1;
    font-size: calc(var(--major-size) * 0.75);
  }

  .subtitle-display {
    font-size: calc(var(--major-size) * 0.285);
    letter-spacing: 0.125em;
    grid-area: subtitle;
    max-width: 27ch;
    color: var(--fg);
  }

  p {
    font-family: var(--serif);
    letter-spacing: 0.1em;
  }

  .message {
    font-family: var(--display);
    font-size: calc(var(--major-size) * 0.33);
    max-width: 40ch;
    text-wrap: balance;
  }

  .button-group {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    /* grid-template-rows: 3rem; */
    gap: var(--size-1);
    justify-content: stretch;
    justify-self: stretch;
  }

  .hint,
  .button-group,
  #latest {
    grid-column: span 2;
  }

  .hint {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--size-0);
    margin: 0 auto;
    text-decoration: none;
    display: none;
    outline-offset: var(--size-0);
  }

  .hint * {
    transition: color 0.2s ease-in-out, fill 0.2s ease-in-out;
  }

  .hint:hover p,
  .hint:focus p {
    color: var(--secondary);
  }
  .hint:hover .c {
    fill: var(--secondary);
  }

  .hint .display {
    font-size: var(--size-4);
    color: var(--primary);
    line-height: 1;
  }

  .hint svg {
    width: 15%;
  }

  .hint .c {
    fill: var(--primary);
  }

  #latest {
    display: flex;
    flex-direction: column;
    gap: var(--size-4);
  }

  @media(min-width: 48rem) {
    :root {
      --major-size: var(--size-7);
    }
    main {
      padding: var(--size-6);
    }
    #latest {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: var(--size-6);
    }

    #latest .hint {
      grid-column: span 2;
      justify-self: center;
      font-size: var(--size-5);
    }
  }

  @media(min-width: 60rem) {
    main {
      display: grid;
      grid-template-columns: 1fr 1fr;
      grid-template-rows: auto 1fr;
      gap: var(--size-6);
      justify-items: start;
    }

    main > * + * {
      margin-top: 0;
    }

    .content {
      font-size: var(--size-1);
    }

    .hint {
      display: flex;
    }

    .button-group {
      gap: var(--size-6);
    }

    /* #latest { */
    /*   grid-template-columns: repeat(3, 1fr); */
    /* } */
    /**/
    /* #latest .hint { */
    /*   grid-column: span 3; */
    /* } */
  }
</style>
