---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import ArticleCard from '../components/ArticleCard.astro';
import IntroGraphic from '../components/IntroGraphic.astro';
import Icon from '../components/Icon.astro';

let allBlogPosts = await getCollection('blog', ({data}) => data.draft !== true);

let allPosts = [...allBlogPosts]
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
  .slice(0, 6);
---

<Layout title="Jeff Caldwell" description="Jeff Caldwell is a web developer, writer, journalist, and student who makes fast, accessible websites and writes engaging docs and tutorials.">
	<main id="main" tabindex="-1">
    <div class="hero">
      <h1>
        <span class="visible-hidden">Jeff Caldwell is a web developer, writer, and student.</span>
        <IntroGraphic />
      </h1>
    </div>

    <div class="content">
      <p class="message">
        I make websites that work for everyone, and write concise, simple docs.
      </p>
      <div class="button-group">
        <a href="/projects" class="button">Projects</a>
        <a href="/resume" class="button">Resume</a>
      </div>
    </div>

    <div class="hint">
      <h2>Latest Posts</h2>
    </div>

    <section id="latest">
      {allPosts.map((post, index) => <ArticleCard data={post.data} {index} headingLevel={3} url={'/' + post.collection + '/' + post.slug}/>)}
    </section>
    <div class="more">
      <a href="/blog" >
        All posts
        <Icon name="arrow" label="All posts" />
      </a>
    </div>
	</main>
  <div class="isolate">
    <div class="noise"></div>
    <div class="overlay"></div>
  </div>
</Layout>

<style>

  body {
    position: relative;
    background-color: var(--bg);
  }

  main {
    container: main / inline-size;
    display: flex;
    flex-direction: column;
    width: 100vw;
    gap: var(--size-4);
  }

  .hero {
    color: var(--primary);
  }

  .content {
    display: flex;
    flex-direction: column;
    gap: var(--size-0);
  }

  .message {
    font-size: var(--size-3);
    text-wrap: balance;
    word-wrap: break-word;
    word-break: break-word;
    -moz-hyphens: auto;
    -webkit-hyphens: auto;
    hyphens: auto;
    margin: 0;
    padding: 0;
    line-height: 1.5;
  }

  .button-group {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: var(--size-6);
    }

  .hint,
  #latest,
  .more {
    grid-column: span 2;
  }

  .hint {
    border-bottom: var(--outline-medium) solid var(--fg);
  }

  #latest {
    display: flex;
    flex-direction: column;
    /* grid-template-columns: 1fr; */
    gap: var(--size-6);
  }

  @container (min-width: 800px) {
    #latest {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: var(--size-6);
    }
  }
  
  .more {
    display: flex;
    justify-content: flex-end;
    color: var(--bg);
  }

  .more a {
    display: flex;
    align-items: center;
    gap: var(--size--1);
    outline-color: var(--fg);
    padding: 0.25em;
    outline-offset: 0;
  }

  .more a:focus {
    text-decoration-color: transparent;
    background-color: hsl(var(--bg-hsl), 40%);
    color: var(--fg);
  }

  .more a:hover {
    color: var(--fg);
  }

  .isolate {
    background-color: var(--bg);
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: -1;
   isolation: isolate; 
  }

  .noise,
  .overlay{
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }

  .noise {
    filter: contrast(120%);
    background-color: var(--bg);
    background:
      linear-gradient(
        0deg,
        var(--secondary),
        /* var(--secondary-alpha-2), */
        /* var(--primary), */
        var(--bg-alpha-2),
        /* var(--bg), */
        var(--bg-darker)
      ),
      url('/images/noise.svg');
  }

  .overlay {
    background: var(--primary);
    /* mix-blend-mode: multiply; */
    mix-blend-mode:overlay;

    /* Use this blending mode for a nice light, warm theme */
    /* mix-blend-mode: exclusion; */
  }

  @media(max-width: 25rem) {
    .message {
      font-size: var(--size-2);
    }
  }

  @media(min-width: 48rem) {
    main {
      padding: var(--size-6);
    }
  }

  @media(min-width: 60rem) {
    main {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: var(--size-6);
      justify-items: stretch;
    }

    .hero,
    .content {
      margin-block: var(--size-6);
    }

    main > * + * {
      margin-top: 0;
    }

    .message {
      font-size: var(--size-3);
    }

    .button-group {
      gap: var(--size-0);
    }

    .hint h2 {
      font-size: var(--size-4);
    }
    
  }
</style>
